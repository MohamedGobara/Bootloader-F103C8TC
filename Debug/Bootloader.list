
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002480  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800258c  0800258c  0000358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d4  080025d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d4  080025d4  000035d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025d8  080025d8  000035d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080025e8  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080025e8  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008435  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0000c46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  0000e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e11  00000000  00000000  0000ee7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f37  00000000  00000000  00025c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823d8  00000000  00000000  0002fbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000b1fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000b3fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002574 	.word	0x08002574

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002574 	.word	0x08002574

0800014c <u8VerifyCRC>:
/* External declarations for the CRC and UART handlers */
extern CRC_HandleTypeDef hcrc;
extern UART_HandleTypeDef huart1;
/* Verifies the CRC of the received data */
static uint8_t u8VerifyCRC(uint8_t *copy_u8DataArr, uint8_t Copy_u8Length,
		uint32_t copy_u32HostCRC) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
	uint32_t local_u32Temp, local_u32CRCAccumlative;
	uint8_t counter;

	/* Accumulate the CRC for each byte in the data array */
	for (counter = 0; counter < Copy_u8Length; counter++) {
 800015a:	2300      	movs	r3, #0
 800015c:	76fb      	strb	r3, [r7, #27]
 800015e:	e00f      	b.n	8000180 <u8VerifyCRC+0x34>
		local_u32Temp = copy_u8DataArr[counter];
 8000160:	7efb      	ldrb	r3, [r7, #27]
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	4413      	add	r3, r2
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	617b      	str	r3, [r7, #20]
		local_u32CRCAccumlative = HAL_CRC_Accumulate(&hcrc, &local_u32Temp, 1);
 800016a:	f107 0314 	add.w	r3, r7, #20
 800016e:	2201      	movs	r2, #1
 8000170:	4619      	mov	r1, r3
 8000172:	480f      	ldr	r0, [pc, #60]	@ (80001b0 <u8VerifyCRC+0x64>)
 8000174:	f000 ff27 	bl	8000fc6 <HAL_CRC_Accumulate>
 8000178:	61f8      	str	r0, [r7, #28]
	for (counter = 0; counter < Copy_u8Length; counter++) {
 800017a:	7efb      	ldrb	r3, [r7, #27]
 800017c:	3301      	adds	r3, #1
 800017e:	76fb      	strb	r3, [r7, #27]
 8000180:	7efa      	ldrb	r2, [r7, #27]
 8000182:	7afb      	ldrb	r3, [r7, #11]
 8000184:	429a      	cmp	r2, r3
 8000186:	d3eb      	bcc.n	8000160 <u8VerifyCRC+0x14>
	}

	/* Reset the CRC calculation unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000188:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <u8VerifyCRC+0x64>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <u8VerifyCRC+0x64>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f042 0201 	orr.w	r2, r2, #1
 8000196:	609a      	str	r2, [r3, #8]

	/* Return success or fail based on CRC comparison */
	return local_u32CRCAccumlative == copy_u32HostCRC ? CRC_SUCCESS : CRC_FAIL;
 8000198:	69fa      	ldr	r2, [r7, #28]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	429a      	cmp	r2, r3
 800019e:	d101      	bne.n	80001a4 <u8VerifyCRC+0x58>
 80001a0:	2301      	movs	r3, #1
 80001a2:	e000      	b.n	80001a6 <u8VerifyCRC+0x5a>
 80001a4:	2302      	movs	r3, #2
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	3720      	adds	r7, #32
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000002c 	.word	0x2000002c

080001b4 <vSendACK>:

/* Sends an ACK (acknowledgement) response with the specified reply length */
static void vSendACK(uint8_t copy_u8ReplyLength) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8AckBuffer[2] = { Bootloader_ACK, copy_u8ReplyLength };
 80001be:	23a5      	movs	r3, #165	@ 0xa5
 80001c0:	733b      	strb	r3, [r7, #12]
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	737b      	strb	r3, [r7, #13]

	/* Transmit the ACK response */
	HAL_UART_Transmit(&huart1, Local_u8AckBuffer, 2, HAL_MAX_DELAY);
 80001c6:	f107 010c 	add.w	r1, r7, #12
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	2202      	movs	r2, #2
 80001d0:	4803      	ldr	r0, [pc, #12]	@ (80001e0 <vSendACK+0x2c>)
 80001d2:	f001 ff37 	bl	8002044 <HAL_UART_Transmit>
}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000034 	.word	0x20000034

080001e4 <vSendNACK>:

/* Sends a NACK (negative acknowledgement) response */
static void vSendNACK(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
	uint8_t Local_u8NACK = Bootloader_NACK;
 80001ea:	237f      	movs	r3, #127	@ 0x7f
 80001ec:	71fb      	strb	r3, [r7, #7]

	/* Transmit the NACK response */
	HAL_UART_Transmit(&huart1, &Local_u8NACK, 1, HAL_MAX_DELAY);
 80001ee:	1df9      	adds	r1, r7, #7
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	2201      	movs	r2, #1
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <vSendNACK+0x20>)
 80001f8:	f001 ff24 	bl	8002044 <HAL_UART_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000034 	.word	0x20000034

08000208 <u8ValidDataAddress>:

static uint8_t u8ValidDataAddress(uint32_t Copy_u32Address) {
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]

	uint8_t local_u8AddressStatus = INVALID_ADDRESS_STATUS;
 8000210:	2301      	movs	r3, #1
 8000212:	73fb      	strb	r3, [r7, #15]

	/* Address is valid if it within : SRAM or FLASH */

	if (Copy_u32Address >= FLASH_BASE && Copy_u32Address <= FLASH_BANK1_END) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800021a:	d306      	bcc.n	800022a <u8ValidDataAddress+0x22>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a0b      	ldr	r2, [pc, #44]	@ (800024c <u8ValidDataAddress+0x44>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d802      	bhi.n	800022a <u8ValidDataAddress+0x22>

		local_u8AddressStatus = VALID_ADDRESS_STATUS;
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	e009      	b.n	800023e <u8ValidDataAddress+0x36>

	} else if (Copy_u32Address >= SRAM_BASE
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000230:	d305      	bcc.n	800023e <u8ValidDataAddress+0x36>
			&& Copy_u32Address <= ((uint32_t) SRAM_BASE + 0x5000U)) {
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a06      	ldr	r2, [pc, #24]	@ (8000250 <u8ValidDataAddress+0x48>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d801      	bhi.n	800023e <u8ValidDataAddress+0x36>

		local_u8AddressStatus = VALID_ADDRESS_STATUS;
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]

	}

	return local_u8AddressStatus;
 800023e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	0801ffff 	.word	0x0801ffff
 8000250:	20005000 	.word	0x20005000

08000254 <u8ExecuteFlashWrite>:


static uint8_t u8ExecuteFlashWrite(uint16_t* local_u16pdata, uint32_t local_u32AddressOfPage, uint8_t local_u8SizeOfData)
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t MyHalStatus= HAL_ERROR ;
 8000262:	2301      	movs	r3, #1
 8000264:	75fb      	strb	r3, [r7, #23]
	if(u8ValidDataAddress(local_u32AddressOfPage)==VALID_ADDRESS_STATUS){
 8000266:	68b8      	ldr	r0, [r7, #8]
 8000268:	f7ff ffce 	bl	8000208 <u8ValidDataAddress>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d129      	bne.n	80002c6 <u8ExecuteFlashWrite+0x72>

		MyHalStatus=HAL_OK ;
 8000272:	2300      	movs	r3, #0
 8000274:	75fb      	strb	r3, [r7, #23]
		uint8_t local_u8ConterInFlash=0 ;
 8000276:	2300      	movs	r3, #0
 8000278:	75bb      	strb	r3, [r7, #22]


		uint8_t local_u8Conter;
		for(local_u8Conter=0 ; local_u8Conter<(local_u8SizeOfData/2);local_u8Conter++){
 800027a:	2300      	movs	r3, #0
 800027c:	757b      	strb	r3, [r7, #21]
 800027e:	e01c      	b.n	80002ba <u8ExecuteFlashWrite+0x66>
			HAL_FLASH_Unlock() ;
 8000280:	f000 ff3c 	bl	80010fc <HAL_FLASH_Unlock>
			MyHalStatus=HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, local_u32AddressOfPage+local_u8ConterInFlash, (uint64_t)local_u16pdata[local_u8Conter]) ;
 8000284:	7dba      	ldrb	r2, [r7, #22]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	18d1      	adds	r1, r2, r3
 800028a:	7d7b      	ldrb	r3, [r7, #21]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	b29b      	uxth	r3, r3
 8000296:	2200      	movs	r2, #0
 8000298:	461c      	mov	r4, r3
 800029a:	4615      	mov	r5, r2
 800029c:	4622      	mov	r2, r4
 800029e:	462b      	mov	r3, r5
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 febb 	bl	800101c <HAL_FLASH_Program>
 80002a6:	4603      	mov	r3, r0
 80002a8:	75fb      	strb	r3, [r7, #23]
			local_u8ConterInFlash+=2;
 80002aa:	7dbb      	ldrb	r3, [r7, #22]
 80002ac:	3302      	adds	r3, #2
 80002ae:	75bb      	strb	r3, [r7, #22]
			HAL_FLASH_Lock();
 80002b0:	f000 ff4a 	bl	8001148 <HAL_FLASH_Lock>
		for(local_u8Conter=0 ; local_u8Conter<(local_u8SizeOfData/2);local_u8Conter++){
 80002b4:	7d7b      	ldrb	r3, [r7, #21]
 80002b6:	3301      	adds	r3, #1
 80002b8:	757b      	strb	r3, [r7, #21]
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	085b      	lsrs	r3, r3, #1
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	7d7a      	ldrb	r2, [r7, #21]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d3dc      	bcc.n	8000280 <u8ExecuteFlashWrite+0x2c>

		}

	}
	return MyHalStatus;
 80002c6:	7dfb      	ldrb	r3, [r7, #23]


}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bdb0      	pop	{r4, r5, r7, pc}

080002d0 <u8ExecuteFlashErease>:

static uint8_t u8ExecuteFlashErease(uint8_t copy_u8PageNumber,
		uint8_t copy_u8NumberOfPages) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]

	uint8_t local_u8HalFlashStatus;

	if (copy_u8PageNumber> MAX_NUMBER_OF_PAGES && copy_u8PageNumber!=FLASH_MASS_ERASE_PATTERN) {
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	2b80      	cmp	r3, #128	@ 0x80
 80002e4:	d905      	bls.n	80002f2 <u8ExecuteFlashErease+0x22>
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2bff      	cmp	r3, #255	@ 0xff
 80002ea:	d002      	beq.n	80002f2 <u8ExecuteFlashErease+0x22>
		local_u8HalFlashStatus = HAL_ERROR;
 80002ec:	2301      	movs	r3, #1
 80002ee:	77fb      	strb	r3, [r7, #31]
 80002f0:	e037      	b.n	8000362 <u8ExecuteFlashErease+0x92>
	} else {

		FLASH_EraseInitTypeDef lcoal_MyFlashErase;
		uint32_t local_u32PageStatus ;

		if (copy_u8PageNumber == FLASH_MASS_ERASE_PATTERN) {
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2bff      	cmp	r3, #255	@ 0xff
 80002f6:	d102      	bne.n	80002fe <u8ExecuteFlashErease+0x2e>

			lcoal_MyFlashErase.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	e001      	b.n	8000302 <u8ExecuteFlashErease+0x32>

		} else {

			lcoal_MyFlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]

		}

		uint8_t local_u8MaxNumber = MAX_NUMBER_OF_PAGES - copy_u8PageNumber;
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000308:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800030c:	3380      	adds	r3, #128	@ 0x80
 800030e:	77bb      	strb	r3, [r7, #30]

		copy_u8NumberOfPages =
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	7fbb      	ldrb	r3, [r7, #30]
 8000314:	4293      	cmp	r3, r2
 8000316:	bf28      	it	cs
 8000318:	4613      	movcs	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
				copy_u8NumberOfPages > local_u8MaxNumber ?
						local_u8MaxNumber : copy_u8NumberOfPages;
		lcoal_MyFlashErase.NbPages = (uint32_t) copy_u8NumberOfPages;
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	61bb      	str	r3, [r7, #24]
		lcoal_MyFlashErase.Banks = FLASH_BANK_1 ;
 8000320:	2301      	movs	r3, #1
 8000322:	613b      	str	r3, [r7, #16]
		lcoal_MyFlashErase.PageAddress = (((uint32_t)FLASH_BASE )+ ((uint32_t)copy_u8PageNumber*1024));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800032a:	029b      	lsls	r3, r3, #10
 800032c:	617b      	str	r3, [r7, #20]

		HAL_FLASH_Unlock() ;
 800032e:	f000 fee5 	bl	80010fc <HAL_FLASH_Unlock>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <u8ExecuteFlashErease+0x9c>)
 800033a:	f001 fa0a 	bl	8001752 <HAL_GPIO_WritePin>
		local_u8HalFlashStatus=HAL_FLASHEx_Erase(&lcoal_MyFlashErase, &local_u32PageStatus) ;
 800033e:	f107 0208 	add.w	r2, r7, #8
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 ffbf 	bl	80012cc <HAL_FLASHEx_Erase>
 800034e:	4603      	mov	r3, r0
 8000350:	77fb      	strb	r3, [r7, #31]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000358:	4804      	ldr	r0, [pc, #16]	@ (800036c <u8ExecuteFlashErease+0x9c>)
 800035a:	f001 f9fa 	bl	8001752 <HAL_GPIO_WritePin>

		HAL_FLASH_Lock();
 800035e:	f000 fef3 	bl	8001148 <HAL_FLASH_Lock>

	}

	return local_u8HalFlashStatus;
 8000362:	7ffb      	ldrb	r3, [r7, #31]

}
 8000364:	4618      	mov	r0, r3
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40011000 	.word	0x40011000

08000370 <Bootloader_JumpToUserApp>:

/* Jumps to the user application at the specified address */
void Bootloader_JumpToUserApp(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	void (*localPtr_userApp)(void);
	/* Variable to hold the stack pointer value of the user application */
	uint32_t local_u32MSPValue;

	/* Get the value of the stack pointer from the user app's memory */
	local_u32MSPValue = *((volatile uint32_t*) USER_APP_ADDRESS);
 8000376:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <Bootloader_JumpToUserApp+0x24>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	607b      	str	r3, [r7, #4]

	/* Set the stack pointer value in the MSP register */
	__asm volatile ("MSR MSP, %0" :: "r"(local_u32MSPValue));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f383 8808 	msr	MSP, r3

	/* Get the reset handler of the user application */
	localPtr_userApp = ((volatile void*) *((volatile uint32_t*) USER_APP_ADDRESS
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <Bootloader_JumpToUserApp+0x28>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	603b      	str	r3, [r7, #0]
			+ 1));

	/* Jump to the user application */
	localPtr_userApp();
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	4798      	blx	r3
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	08008800 	.word	0x08008800
 8000398:	08008804 	.word	0x08008804

0800039c <Bootloader_vHandle_GET_VER>:

/* Handles the GET_VER command to return the bootloader version */
void Bootloader_vHandle_GET_VER(uint8_t *localPacketptr) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	75fb      	strb	r3, [r7, #23]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 80003ac:	7dfb      	ldrb	r3, [r7, #23]
 80003ae:	3b04      	subs	r3, #4
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	613b      	str	r3, [r7, #16]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80003b8:	7dfb      	ldrb	r3, [r7, #23]
 80003ba:	3b04      	subs	r3, #4
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	693a      	ldr	r2, [r7, #16]
 80003c0:	4619      	mov	r1, r3
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff fec2 	bl	800014c <u8VerifyCRC>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d10d      	bne.n	80003ea <Bootloader_vHandle_GET_VER+0x4e>
			local_u32CRCReceived) == CRC_SUCCESS) {
		vSendACK(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f7ff fef0 	bl	80001b4 <vSendACK>

		uint8_t local_u8BLVersion = Bootloader_VERSION;
 80003d4:	2302      	movs	r3, #2
 80003d6:	73fb      	strb	r3, [r7, #15]

		/* Send the bootloader version */
		HAL_UART_Transmit(&huart1, &local_u8BLVersion, 1, HAL_MAX_DELAY);
 80003d8:	f107 010f 	add.w	r1, r7, #15
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	2201      	movs	r2, #1
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <Bootloader_vHandle_GET_VER+0x5c>)
 80003e4:	f001 fe2e 	bl	8002044 <HAL_UART_Transmit>
	} else {
		vSendNACK();
	}
}
 80003e8:	e001      	b.n	80003ee <Bootloader_vHandle_GET_VER+0x52>
		vSendNACK();
 80003ea:	f7ff fefb 	bl	80001e4 <vSendNACK>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000034 	.word	0x20000034

080003fc <Bootloader_vHandle_GET_HELP>:

/* Handles the GET_HELP command */
void Bootloader_vHandle_GET_HELP(uint8_t *localPacketptr) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]

	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3301      	adds	r3, #1
 800040a:	77fb      	strb	r3, [r7, #31]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 800040c:	7ffb      	ldrb	r3, [r7, #31]
 800040e:	3b04      	subs	r3, #4
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	61bb      	str	r3, [r7, #24]

	uint8_t local_u8cCommands[] = { BL_GET_VER,
 8000418:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <Bootloader_vHandle_GET_HELP+0x64>)
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000420:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	BL_MEM_READ,
	BL_READ_SECTOR_STATUS,
	BL_OTP_READ,
	BL_DIS_WR_PROTECTION };
	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 8000424:	7ffb      	ldrb	r3, [r7, #31]
 8000426:	3b04      	subs	r3, #4
 8000428:	b2db      	uxtb	r3, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4619      	mov	r1, r3
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff fe8c 	bl	800014c <u8VerifyCRC>
 8000434:	4603      	mov	r3, r0
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <Bootloader_vHandle_GET_HELP+0x56>
			local_u32CRCReceived) == CRC_SUCCESS) {
		vSendACK(sizeof(local_u8cCommands));
 800043a:	200c      	movs	r0, #12
 800043c:	f7ff feba 	bl	80001b4 <vSendACK>
		HAL_UART_Transmit(&huart1, local_u8cCommands,
 8000440:	f107 010c 	add.w	r1, r7, #12
 8000444:	f04f 33ff 	mov.w	r3, #4294967295
 8000448:	220c      	movs	r2, #12
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <Bootloader_vHandle_GET_HELP+0x68>)
 800044c:	f001 fdfa 	bl	8002044 <HAL_UART_Transmit>
				(uint16_t) sizeof(local_u8cCommands), HAL_MAX_DELAY);
	} else {
		vSendNACK();
	}

}
 8000450:	e001      	b.n	8000456 <Bootloader_vHandle_GET_HELP+0x5a>
		vSendNACK();
 8000452:	f7ff fec7 	bl	80001e4 <vSendNACK>
}
 8000456:	bf00      	nop
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	0800258c 	.word	0x0800258c
 8000464:	20000034 	.word	0x20000034

08000468 <Bootloader_vHandle_GET_CID>:

/* Handles the GET_CID command */
void Bootloader_vHandle_GET_CID(uint8_t *localPacketptr) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	75fb      	strb	r3, [r7, #23]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 8000478:	7dfb      	ldrb	r3, [r7, #23]
 800047a:	3b04      	subs	r3, #4
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	613b      	str	r3, [r7, #16]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	3b04      	subs	r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	693a      	ldr	r2, [r7, #16]
 800048c:	4619      	mov	r1, r3
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff fe5c 	bl	800014c <u8VerifyCRC>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	d112      	bne.n	80004c0 <Bootloader_vHandle_GET_CID+0x58>
			local_u32CRCReceived) == CRC_SUCCESS) {
		vSendACK(2);
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff fe8a 	bl	80001b4 <vSendACK>

		uint16_t Local_u16CID = (DBGMCU_IDCODE_REG & 0xFFF);
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <Bootloader_vHandle_GET_CID+0x64>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	81fb      	strh	r3, [r7, #14]

		HAL_UART_Transmit(&huart1, (uint8_t*) &Local_u16CID, 2, HAL_MAX_DELAY);
 80004ae:	f107 010e 	add.w	r1, r7, #14
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	2202      	movs	r2, #2
 80004b8:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <Bootloader_vHandle_GET_CID+0x68>)
 80004ba:	f001 fdc3 	bl	8002044 <HAL_UART_Transmit>
	} else {
		vSendNACK();
	}
}
 80004be:	e001      	b.n	80004c4 <Bootloader_vHandle_GET_CID+0x5c>
		vSendNACK();
 80004c0:	f7ff fe90 	bl	80001e4 <vSendNACK>
}
 80004c4:	bf00      	nop
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	e0042000 	.word	0xe0042000
 80004d0:	20000034 	.word	0x20000034

080004d4 <Bootloader_vHandle_RDP_STATUS>:

/* Handles the RDP_STATUS command */
void Bootloader_vHandle_RDP_STATUS(uint8_t *localPacketptr) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	3b04      	subs	r3, #4
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	3b04      	subs	r3, #4
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	4619      	mov	r1, r3
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff fe26 	bl	800014c <u8VerifyCRC>
 8000500:	4603      	mov	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d001      	beq.n	800050a <Bootloader_vHandle_RDP_STATUS+0x36>
		//vSendACK(2);

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 8000506:	f7ff fe6d 	bl	80001e4 <vSendNACK>
	}
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Bootloader_vHandle_GO_TO_ADDR>:

/* Handles the GO_TO_ADDR command */
void Bootloader_vHandle_GO_TO_ADDR(uint8_t *localPacketptr) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	77fb      	strb	r3, [r7, #31]

	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 8000524:	7ffb      	ldrb	r3, [r7, #31]
 8000526:	3b04      	subs	r3, #4
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	61bb      	str	r3, [r7, #24]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 8000530:	7ffb      	ldrb	r3, [r7, #31]
 8000532:	3b04      	subs	r3, #4
 8000534:	b2db      	uxtb	r3, r3
 8000536:	69ba      	ldr	r2, [r7, #24]
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fe06 	bl	800014c <u8VerifyCRC>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d12a      	bne.n	800059c <Bootloader_vHandle_GO_TO_ADDR+0x88>
			local_u32CRCReceived) == CRC_SUCCESS) {

		vSendACK(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff fe34 	bl	80001b4 <vSendACK>

		uint32_t local_u32Address = *((uint32_t*) &localPacketptr[2]);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000552:	617b      	str	r3, [r7, #20]

		uint8_t local_u8AddressStatus = u8ValidDataAddress(local_u32Address);
 8000554:	6978      	ldr	r0, [r7, #20]
 8000556:	f7ff fe57 	bl	8000208 <u8ValidDataAddress>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]
		if (local_u8AddressStatus == VALID_ADDRESS_STATUS) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d112      	bne.n	800058a <Bootloader_vHandle_GO_TO_ADDR+0x76>
			void (*local_PtrFun)(void) = NULL;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart1, (uint8_t*) &local_u8AddressStatus, 1,
 8000568:	f107 010f 	add.w	r1, r7, #15
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	2201      	movs	r2, #1
 8000572:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <Bootloader_vHandle_GO_TO_ADDR+0x94>)
 8000574:	f001 fd66 	bl	8002044 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			/* Set T-BIT for any address value */
			local_u32Address |= 0x01;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	617b      	str	r3, [r7, #20]

			local_PtrFun = (void*) local_u32Address;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	613b      	str	r3, [r7, #16]

			local_PtrFun();
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	4798      	blx	r3

		}
	} else {
		vSendNACK();
	}
}
 8000588:	e00a      	b.n	80005a0 <Bootloader_vHandle_GO_TO_ADDR+0x8c>
			HAL_UART_Transmit(&huart1, (uint8_t*) &local_u8AddressStatus, 1,
 800058a:	f107 010f 	add.w	r1, r7, #15
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <Bootloader_vHandle_GO_TO_ADDR+0x94>)
 8000596:	f001 fd55 	bl	8002044 <HAL_UART_Transmit>
}
 800059a:	e001      	b.n	80005a0 <Bootloader_vHandle_GO_TO_ADDR+0x8c>
		vSendNACK();
 800059c:	f7ff fe22 	bl	80001e4 <vSendNACK>
}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000034 	.word	0x20000034

080005ac <Bootloader_vHandle_FLASH_EREASE>:

/* Handles the FLASH_EREASE command */
void Bootloader_vHandle_FLASH_EREASE(uint8_t *localPacketptr) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	75fb      	strb	r3, [r7, #23]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	3b04      	subs	r3, #4
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	613b      	str	r3, [r7, #16]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	3b04      	subs	r3, #4
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4619      	mov	r1, r3
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fdba 	bl	800014c <u8VerifyCRC>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d117      	bne.n	800060e <Bootloader_vHandle_FLASH_EREASE+0x62>
			local_u32CRCReceived) == CRC_SUCCESS) {
			vSendACK(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff fde8 	bl	80001b4 <vSendACK>
			uint8_t local_u8FlashEraseStatus ;

			local_u8FlashEraseStatus = u8ExecuteFlashErease(localPacketptr[2], localPacketptr[3]);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3302      	adds	r3, #2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3303      	adds	r3, #3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f7ff fe6c 	bl	80002d0 <u8ExecuteFlashErease>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit(&huart1, &local_u8FlashEraseStatus, 1, HAL_MAX_DELAY);
 80005fc:	f107 010f 	add.w	r1, r7, #15
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <Bootloader_vHandle_FLASH_EREASE+0x70>)
 8000608:	f001 fd1c 	bl	8002044 <HAL_UART_Transmit>
	} else {
		vSendNACK();
	}
}
 800060c:	e001      	b.n	8000612 <Bootloader_vHandle_FLASH_EREASE+0x66>
		vSendNACK();
 800060e:	f7ff fde9 	bl	80001e4 <vSendNACK>
}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000034 	.word	0x20000034

08000620 <Bootloader_vHandle_MEM_WRITE>:

/* Handles the MEM_WRITE command */
void Bootloader_vHandle_MEM_WRITE(uint8_t *localPacketptr) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	75fb      	strb	r3, [r7, #23]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3b04      	subs	r3, #4
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	613b      	str	r3, [r7, #16]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	3b04      	subs	r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff fd80 	bl	800014c <u8VerifyCRC>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d118      	bne.n	8000684 <Bootloader_vHandle_MEM_WRITE+0x64>
			local_u32CRCReceived) == CRC_SUCCESS) {
			vSendACK(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fdae 	bl	80001b4 <vSendACK>

			uint8_t local_u8Status = u8ExecuteFlashWrite((uint16_t*)&localPacketptr[7], *(uint32_t*)&localPacketptr[2], localPacketptr[6]) ;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	1dd8      	adds	r0, r3, #7
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3302      	adds	r3, #2
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3306      	adds	r3, #6
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	f7ff fdf3 	bl	8000254 <u8ExecuteFlashWrite>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]

		/* Send the bootloader version */
		HAL_UART_Transmit(&huart1, &local_u8Status, 1, HAL_MAX_DELAY);
 8000672:	f107 010f 	add.w	r1, r7, #15
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <Bootloader_vHandle_MEM_WRITE+0x70>)
 800067e:	f001 fce1 	bl	8002044 <HAL_UART_Transmit>
	} else {
		vSendNACK();
	}
}
 8000682:	e001      	b.n	8000688 <Bootloader_vHandle_MEM_WRITE+0x68>
		vSendNACK();
 8000684:	f7ff fdae 	bl	80001e4 <vSendNACK>
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000034 	.word	0x20000034

08000694 <Bootloader_vHandle_EN_RW_PROTECT>:

/* Handles the EN_RW_PROTECT command */
void Bootloader_vHandle_EN_RW_PROTECT(uint8_t *localPacketptr) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	3b04      	subs	r3, #4
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	3b04      	subs	r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fd46 	bl	800014c <u8VerifyCRC>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d001      	beq.n	80006ca <Bootloader_vHandle_EN_RW_PROTECT+0x36>
		//	vSendACK();

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 80006c6:	f7ff fd8d 	bl	80001e4 <vSendNACK>
	}
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <Bootloader_vHandle_MEM_READ>:

/* Handles the MEM_READ command */
void Bootloader_vHandle_MEM_READ(uint8_t *localPacketptr) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3b04      	subs	r3, #4
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3b04      	subs	r3, #4
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fd27 	bl	800014c <u8VerifyCRC>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d001      	beq.n	8000708 <Bootloader_vHandle_MEM_READ+0x36>
		//	vSendACK();

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 8000704:	f7ff fd6e 	bl	80001e4 <vSendNACK>
	}
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <Bootloader_vHandle_READ_SECTOR_STATUS>:

/* Handles the READ_SECTOR_STATUS command */
void Bootloader_vHandle_READ_SECTOR_STATUS(uint8_t *localPacketptr) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3b04      	subs	r3, #4
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3b04      	subs	r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	4619      	mov	r1, r3
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fd08 	bl	800014c <u8VerifyCRC>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d001      	beq.n	8000746 <Bootloader_vHandle_READ_SECTOR_STATUS+0x36>
		//	vSendACK();

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 8000742:	f7ff fd4f 	bl	80001e4 <vSendNACK>
	}
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <Bootloader_vHandle_OTP_READ>:

/* Handles the OTP_READ command */
void Bootloader_vHandle_OTP_READ(uint8_t *localPacketptr) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3b04      	subs	r3, #4
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3b04      	subs	r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fce9 	bl	800014c <u8VerifyCRC>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d001      	beq.n	8000784 <Bootloader_vHandle_OTP_READ+0x36>
		//	vSendACK();

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 8000780:	f7ff fd30 	bl	80001e4 <vSendNACK>
	}
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <Bootloader_vHandle_DIS_WR_PROTECTION>:

/* Handles the DIS_WR_PROTECTION command */
void Bootloader_vHandle_DIS_WR_PROTECTION(uint8_t *localPacketptr) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t local_u8TotalSizeOfPacket = localPacketptr[0] + 1;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
			+ local_u8TotalSizeOfPacket - 4));
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	3b04      	subs	r3, #4
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4413      	add	r3, r2
	uint32_t local_u32CRCReceived = *((uint32_t*) (localPacketptr
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	60bb      	str	r3, [r7, #8]

	/* Verify the CRC of the received packet */
	if (u8VerifyCRC(localPacketptr, (local_u8TotalSizeOfPacket - 4),
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3b04      	subs	r3, #4
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fcca 	bl	800014c <u8VerifyCRC>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d001      	beq.n	80007c2 <Bootloader_vHandle_DIS_WR_PROTECTION+0x36>
		//	vSendACK();

		/* Send the bootloader version */
		//HAL_UART_Transmit(&huart1, &, , HAL_MAX_DELAY);
	} else {
		vSendNACK();
 80007be:	f7ff fd11 	bl	80001e4 <vSendNACK>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <Bootloader_vReceiveData>:

/* Receives data packets and processes them based on command ID */
void Bootloader_vReceiveData(void) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b0c5      	sub	sp, #276	@ 0x114
 80007d0:	af00      	add	r7, sp, #0
	/* Local array to store the received packet */
	uint8_t local_u8packet[255] = { 0 };
 80007d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	22fb      	movs	r2, #251	@ 0xfb
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fe99 	bl	800251c <memset>

	while (1) {
		/* Clear the packet buffer before each iteration */
		memset(local_u8packet, 0, 255);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	22ff      	movs	r2, #255	@ 0xff
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fe92 	bl	800251c <memset>

		/* Receive the length of the packet (first byte) */
		HAL_UART_Receive(&huart1, local_u8packet, 1, HAL_MAX_DELAY);
 80007f8:	f107 0110 	add.w	r1, r7, #16
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	2201      	movs	r2, #1
 8000802:	4848      	ldr	r0, [pc, #288]	@ (8000924 <Bootloader_vReceiveData+0x158>)
 8000804:	f001 fca9 	bl	800215a <HAL_UART_Receive>

		/* Receive the remaining bytes up to the CRC block */
		HAL_UART_Receive(&huart1, &local_u8packet[1], local_u8packet[0],
 8000808:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800080c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	1c59      	adds	r1, r3, #1
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	4841      	ldr	r0, [pc, #260]	@ (8000924 <Bootloader_vReceiveData+0x158>)
 8000820:	f001 fc9b 	bl	800215a <HAL_UART_Receive>
		HAL_MAX_DELAY);

		uint8_t invalid_ID_string[] = "Invalid ID\r\n";
 8000824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800082c:	4a3e      	ldr	r2, [pc, #248]	@ (8000928 <Bootloader_vReceiveData+0x15c>)
 800082e:	461c      	mov	r4, r3
 8000830:	4613      	mov	r3, r2
 8000832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000834:	c407      	stmia	r4!, {r0, r1, r2}
 8000836:	7023      	strb	r3, [r4, #0]

		/* Process the packet based on the command ID */
		switch (local_u8packet[1]) {
 8000838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800083c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	3b51      	subs	r3, #81	@ 0x51
 8000844:	2b0b      	cmp	r3, #11
 8000846:	d863      	bhi.n	8000910 <Bootloader_vReceiveData+0x144>
 8000848:	a201      	add	r2, pc, #4	@ (adr r2, 8000850 <Bootloader_vReceiveData+0x84>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	08000881 	.word	0x08000881
 8000854:	0800088d 	.word	0x0800088d
 8000858:	08000899 	.word	0x08000899
 800085c:	080008a5 	.word	0x080008a5
 8000860:	080008b1 	.word	0x080008b1
 8000864:	080008bd 	.word	0x080008bd
 8000868:	080008c9 	.word	0x080008c9
 800086c:	080008d5 	.word	0x080008d5
 8000870:	080008e1 	.word	0x080008e1
 8000874:	080008ed 	.word	0x080008ed
 8000878:	080008f9 	.word	0x080008f9
 800087c:	08000905 	.word	0x08000905
		case BL_GET_VER:
			Bootloader_vHandle_GET_VER(local_u8packet);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fd89 	bl	800039c <Bootloader_vHandle_GET_VER>
			break;
 800088a:	e049      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_GET_HELP:
			Bootloader_vHandle_GET_HELP(local_u8packet);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fdb3 	bl	80003fc <Bootloader_vHandle_GET_HELP>
			break;
 8000896:	e043      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_GET_CID:
			Bootloader_vHandle_GET_CID(local_u8packet);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fde3 	bl	8000468 <Bootloader_vHandle_GET_CID>
			break;
 80008a2:	e03d      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_RDP_STATUS:
			Bootloader_vHandle_RDP_STATUS(local_u8packet);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe13 	bl	80004d4 <Bootloader_vHandle_RDP_STATUS>
			break;
 80008ae:	e037      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_GO_TO_ADDR:
			Bootloader_vHandle_GO_TO_ADDR(local_u8packet);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe2d 	bl	8000514 <Bootloader_vHandle_GO_TO_ADDR>
			break;
 80008ba:	e031      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_FLASH_EREASE:
			Bootloader_vHandle_FLASH_EREASE(local_u8packet);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe73 	bl	80005ac <Bootloader_vHandle_FLASH_EREASE>
			break;
 80008c6:	e02b      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_MEM_WRITE:
			Bootloader_vHandle_MEM_WRITE(local_u8packet);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fea7 	bl	8000620 <Bootloader_vHandle_MEM_WRITE>
			break;
 80008d2:	e025      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_EN_RW_PROTECT:
			Bootloader_vHandle_EN_RW_PROTECT(local_u8packet);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fedb 	bl	8000694 <Bootloader_vHandle_EN_RW_PROTECT>
			break;
 80008de:	e01f      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_MEM_READ:
			Bootloader_vHandle_MEM_READ(local_u8packet);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fef4 	bl	80006d2 <Bootloader_vHandle_MEM_READ>
			break;
 80008ea:	e019      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_READ_SECTOR_STATUS:
			Bootloader_vHandle_READ_SECTOR_STATUS(local_u8packet);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff0d 	bl	8000710 <Bootloader_vHandle_READ_SECTOR_STATUS>
			break;
 80008f6:	e013      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_OTP_READ:
			Bootloader_vHandle_OTP_READ(local_u8packet);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff26 	bl	800074e <Bootloader_vHandle_OTP_READ>
			break;
 8000902:	e00d      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		case BL_DIS_WR_PROTECTION:
			Bootloader_vHandle_DIS_WR_PROTECTION(local_u8packet);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff3f 	bl	800078c <Bootloader_vHandle_DIS_WR_PROTECTION>
			break;
 800090e:	e007      	b.n	8000920 <Bootloader_vReceiveData+0x154>
		default:
			HAL_UART_Transmit(&huart1, invalid_ID_string,
 8000910:	4639      	mov	r1, r7
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	220d      	movs	r2, #13
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <Bootloader_vReceiveData+0x158>)
 800091a:	f001 fb93 	bl	8002044 <HAL_UART_Transmit>
					sizeof(invalid_ID_string), HAL_MAX_DELAY);
			break;
 800091e:	bf00      	nop
	while (1) {
 8000920:	e763      	b.n	80007ea <Bootloader_vReceiveData+0x1e>
 8000922:	bf00      	nop
 8000924:	20000034 	.word	0x20000034
 8000928:	08002598 	.word	0x08002598

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 f9e8 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */
 // uint8_t flag  = 0 ;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f818 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f890 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800093c:	f000 f864 	bl	8000a08 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000940:	f000 f84e 	bl	80009e0 <MX_CRC_Init>
  uint32_t adresstesting = &test_Pritinig ;*/

  //uint8_t hello_String[]= "Hello, from Bootloader\n\r"  ;
 // HAL_UART_Transmit(&huart1, hello_String, sizeof(hello_String), HAL_MAX_DELAY) ;

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000944:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <main+0x38>)
 800094a:	f000 feeb 	bl	8001724 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <main+0x2e>
	  Bootloader_vReceiveData() ;
 8000954:	f7ff ff3a 	bl	80007cc <Bootloader_vReceiveData>
 8000958:	e002      	b.n	8000960 <main+0x34>

  }
  else{

	  Bootloader_JumpToUserApp();
 800095a:	f7ff fd09 	bl	8000370 <Bootloader_JumpToUserApp>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <main+0x34>
 8000964:	40010c00 	.word	0x40010c00

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b090      	sub	sp, #64	@ 0x40
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	2228      	movs	r2, #40	@ 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fdd0 	bl	800251c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098e:	2301      	movs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000992:	2310      	movs	r3, #16
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fef0 	bl	8001784 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009aa:	f000 f8b1 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f95e 	bl	8001c88 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f89d 	bl	8000b10 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3740      	adds	r7, #64	@ 0x40
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_CRC_Init+0x20>)
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <MX_CRC_Init+0x24>)
 80009e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_CRC_Init+0x20>)
 80009ec:	f000 facf 	bl	8000f8e <HAL_CRC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009f6:	f000 f88b 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000002c 	.word	0x2000002c
 8000a04:	40023000 	.word	0x40023000

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f001 fab0 	bl	8001fa4 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f861 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000034 	.word	0x20000034
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <MX_GPIO_Init+0xa8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <MX_GPIO_Init+0xac>)
 8000ac0:	f000 fe47 	bl	8001752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <MX_GPIO_Init+0xac>)
 8000ade:	f000 fc9d 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ae2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_GPIO_Init+0xb0>)
 8000af8:	f000 fc90 	bl	800141c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40011000 	.word	0x40011000
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_MspInit+0x60>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_MspInit+0x60>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000

08000b80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <HAL_CRC_MspInit+0x34>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10b      	bne.n	8000baa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_CRC_MspInit+0x38>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_CRC_MspInit+0x38>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_CRC_MspInit+0x38>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40023000 	.word	0x40023000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <HAL_UART_MspInit+0x8c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d131      	bne.n	8000c40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_UART_MspInit+0x90>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <HAL_UART_MspInit+0x94>)
 8000c22:	f000 fbfb 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_UART_MspInit+0x94>)
 8000c3c:	f000 fbee 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f874 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff fff8 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cbe:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a09      	ldr	r2, [pc, #36]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd4:	4c09      	ldr	r4, [pc, #36]	@ (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f001 fc23 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff fe21 	bl	800092c <main>
  bx lr
 8000cea:	4770      	bx	lr
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	080025dc 	.word	0x080025dc
  ldr r2, =_sbss
 8000cf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cfc:	200000a0 	.word	0x200000a0

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_Init+0x28>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	@ (8000d2c <HAL_Init+0x28>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f907 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fefc 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f911 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f8e7 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_IncTick+0x1c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a03      	ldr	r2, [pc, #12]	@ (8000db0 <HAL_IncTick+0x20>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	20000008 	.word	0x20000008
 8000db0:	2000007c 	.word	0x2000007c

08000db4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b02      	ldr	r3, [pc, #8]	@ (8000dc4 <HAL_GetTick+0x10>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	2000007c 	.word	0x2000007c

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	@ (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	@ 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff90 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff49 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff90 	bl	8000e80 <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5f 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e00e      	b.n	8000fbe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	795b      	ldrb	r3, [r3, #5]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fde5 	bl	8000b80 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b087      	sub	sp, #28
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	441a      	add	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3f0      	bcc.n	8000fe2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800100e:	693b      	ldr	r3, [r7, #16]
}
 8001010:	4618      	mov	r0, r3
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <HAL_FLASH_Program+0xd8>)
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_FLASH_Program+0x26>
 800103e:	2302      	movs	r3, #2
 8001040:	e054      	b.n	80010ec <HAL_FLASH_Program+0xd0>
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <HAL_FLASH_Program+0xd8>)
 8001044:	2201      	movs	r2, #1
 8001046:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001048:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800104c:	f000 f8a8 	bl	80011a0 <FLASH_WaitForLastOperation>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d144      	bne.n	80010e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d102      	bne.n	8001066 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001060:	2301      	movs	r3, #1
 8001062:	757b      	strb	r3, [r7, #21]
 8001064:	e007      	b.n	8001076 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d102      	bne.n	8001072 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800106c:	2302      	movs	r3, #2
 800106e:	757b      	strb	r3, [r7, #21]
 8001070:	e001      	b.n	8001076 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001072:	2304      	movs	r3, #4
 8001074:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001076:	2300      	movs	r3, #0
 8001078:	75bb      	strb	r3, [r7, #22]
 800107a:	e02d      	b.n	80010d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	005a      	lsls	r2, r3, #1
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	eb02 0c03 	add.w	ip, r2, r3
 8001086:	7dbb      	ldrb	r3, [r7, #22]
 8001088:	0119      	lsls	r1, r3, #4
 800108a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108e:	f1c1 0620 	rsb	r6, r1, #32
 8001092:	f1a1 0020 	sub.w	r0, r1, #32
 8001096:	fa22 f401 	lsr.w	r4, r2, r1
 800109a:	fa03 f606 	lsl.w	r6, r3, r6
 800109e:	4334      	orrs	r4, r6
 80010a0:	fa23 f000 	lsr.w	r0, r3, r0
 80010a4:	4304      	orrs	r4, r0
 80010a6:	fa23 f501 	lsr.w	r5, r3, r1
 80010aa:	b2a3      	uxth	r3, r4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4660      	mov	r0, ip
 80010b0:	f000 f85a 	bl	8001168 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010b8:	f000 f872 	bl	80011a0 <FLASH_WaitForLastOperation>
 80010bc:	4603      	mov	r3, r0
 80010be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_FLASH_Program+0xdc>)
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_FLASH_Program+0xdc>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	3301      	adds	r3, #1
 80010d6:	75bb      	strb	r3, [r7, #22]
 80010d8:	7dba      	ldrb	r2, [r7, #22]
 80010da:	7d7b      	ldrb	r3, [r7, #21]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3cd      	bcc.n	800107c <HAL_FLASH_Program+0x60>
 80010e0:	e000      	b.n	80010e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80010e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_FLASH_Program+0xd8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	761a      	strb	r2, [r3, #24]

  return status;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f4:	20000080 	.word	0x20000080
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HAL_FLASH_Unlock+0x40>)
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_FLASH_Unlock+0x40>)
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_FLASH_Unlock+0x44>)
 8001116:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_FLASH_Unlock+0x40>)
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_FLASH_Unlock+0x48>)
 800111c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_FLASH_Unlock+0x40>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800112e:	79fb      	ldrb	r3, [r7, #7]
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000
 8001140:	45670123 	.word	0x45670123
 8001144:	cdef89ab 	.word	0xcdef89ab

08001148 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_FLASH_Lock+0x1c>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_FLASH_Lock+0x1c>)
 8001152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001156:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <FLASH_Program_HalfWord+0x30>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <FLASH_Program_HalfWord+0x34>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <FLASH_Program_HalfWord+0x34>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	801a      	strh	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000080 	.word	0x20000080
 800119c:	40022000 	.word	0x40022000

080011a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fe04 	bl	8000db4 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80011ae:	e010      	b.n	80011d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b6:	d00c      	beq.n	80011d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <FLASH_WaitForLastOperation+0x2e>
 80011be:	f7ff fdf9 	bl	8000db4 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d201      	bcs.n	80011d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e025      	b.n	800121e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e8      	bne.n	80011b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 80011ec:	2220      	movs	r2, #32
 80011ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <FLASH_WaitForLastOperation+0x88>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001214:	f000 f80a 	bl	800122c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40022000 	.word	0x40022000

0800122c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001236:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 800124c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001262:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 800126c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <FLASH_SetErrorCode+0x9c>)
 800128c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f240 1201 	movw	r2, #257	@ 0x101
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <FLASH_SetErrorCode+0x86>
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	61d3      	str	r3, [r2, #28]
}  
 80012b0:	e002      	b.n	80012b8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80012b2:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <FLASH_SetErrorCode+0x98>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60d3      	str	r3, [r2, #12]
}  
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000
 80012c8:	20000080 	.word	0x20000080

080012cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012de:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <HAL_FLASHEx_Erase+0xd0>)
 80012e0:	7e1b      	ldrb	r3, [r3, #24]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_FLASHEx_Erase+0x1e>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e053      	b.n	8001392 <HAL_FLASHEx_Erase+0xc6>
 80012ea:	4b2c      	ldr	r3, [pc, #176]	@ (800139c <HAL_FLASHEx_Erase+0xd0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d116      	bne.n	8001326 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012fc:	f7ff ff50 	bl	80011a0 <FLASH_WaitForLastOperation>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d141      	bne.n	800138a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f84c 	bl	80013a4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800130c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001310:	f7ff ff46 	bl	80011a0 <FLASH_WaitForLastOperation>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <HAL_FLASHEx_Erase+0xd4>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <HAL_FLASHEx_Erase+0xd4>)
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	6113      	str	r3, [r2, #16]
 8001324:	e031      	b.n	800138a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001326:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800132a:	f7ff ff39 	bl	80011a0 <FLASH_WaitForLastOperation>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12a      	bne.n	800138a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f04f 32ff 	mov.w	r2, #4294967295
 800133a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	e019      	b.n	8001378 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001344:	68b8      	ldr	r0, [r7, #8]
 8001346:	f000 f849 	bl	80013dc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800134a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800134e:	f7ff ff27 	bl	80011a0 <FLASH_WaitForLastOperation>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_FLASHEx_Erase+0xd4>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_FLASHEx_Erase+0xd4>)
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	601a      	str	r2, [r3, #0]
            break;
 800136e:	e00c      	b.n	800138a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001376:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	029a      	lsls	r2, r3, #10
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4413      	add	r3, r2
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	d3dc      	bcc.n	8001344 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <HAL_FLASHEx_Erase+0xd0>)
 800138c:	2200      	movs	r2, #0
 800138e:	761a      	strb	r2, [r3, #24]

  return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000080 	.word	0x20000080
 80013a0:	40022000 	.word	0x40022000

080013a4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <FLASH_MassErase+0x30>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <FLASH_MassErase+0x34>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <FLASH_MassErase+0x34>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <FLASH_MassErase+0x34>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <FLASH_MassErase+0x34>)
 80013c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000080 	.word	0x20000080
 80013d8:	40022000 	.word	0x40022000

080013dc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <FLASH_PageErase+0x38>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <FLASH_PageErase+0x3c>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <FLASH_PageErase+0x3c>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <FLASH_PageErase+0x3c>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <FLASH_PageErase+0x3c>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <FLASH_PageErase+0x3c>)
 8001402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001406:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000080 	.word	0x20000080
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e169      	b.n	8001704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001430:	2201      	movs	r2, #1
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 8158 	bne.w	80016fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a9a      	ldr	r2, [pc, #616]	@ (80016bc <HAL_GPIO_Init+0x2a0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d05e      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001458:	4a98      	ldr	r2, [pc, #608]	@ (80016bc <HAL_GPIO_Init+0x2a0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d875      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800145e:	4a98      	ldr	r2, [pc, #608]	@ (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d058      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001464:	4a96      	ldr	r2, [pc, #600]	@ (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d86f      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800146a:	4a96      	ldr	r2, [pc, #600]	@ (80016c4 <HAL_GPIO_Init+0x2a8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d052      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001470:	4a94      	ldr	r2, [pc, #592]	@ (80016c4 <HAL_GPIO_Init+0x2a8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d869      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001476:	4a94      	ldr	r2, [pc, #592]	@ (80016c8 <HAL_GPIO_Init+0x2ac>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d04c      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 800147c:	4a92      	ldr	r2, [pc, #584]	@ (80016c8 <HAL_GPIO_Init+0x2ac>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d863      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001482:	4a92      	ldr	r2, [pc, #584]	@ (80016cc <HAL_GPIO_Init+0x2b0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d046      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001488:	4a90      	ldr	r2, [pc, #576]	@ (80016cc <HAL_GPIO_Init+0x2b0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d85d      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d82a      	bhi.n	80014e8 <HAL_GPIO_Init+0xcc>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d859      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001496:	a201      	add	r2, pc, #4	@ (adr r2, 800149c <HAL_GPIO_Init+0x80>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	08001517 	.word	0x08001517
 80014a0:	080014f1 	.word	0x080014f1
 80014a4:	08001503 	.word	0x08001503
 80014a8:	08001545 	.word	0x08001545
 80014ac:	0800154b 	.word	0x0800154b
 80014b0:	0800154b 	.word	0x0800154b
 80014b4:	0800154b 	.word	0x0800154b
 80014b8:	0800154b 	.word	0x0800154b
 80014bc:	0800154b 	.word	0x0800154b
 80014c0:	0800154b 	.word	0x0800154b
 80014c4:	0800154b 	.word	0x0800154b
 80014c8:	0800154b 	.word	0x0800154b
 80014cc:	0800154b 	.word	0x0800154b
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	0800154b 	.word	0x0800154b
 80014d8:	0800154b 	.word	0x0800154b
 80014dc:	0800154b 	.word	0x0800154b
 80014e0:	080014f9 	.word	0x080014f9
 80014e4:	0800150d 	.word	0x0800150d
 80014e8:	4a79      	ldr	r2, [pc, #484]	@ (80016d0 <HAL_GPIO_Init+0x2b4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ee:	e02c      	b.n	800154a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e029      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	3304      	adds	r3, #4
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e024      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	3308      	adds	r3, #8
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e01f      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	330c      	adds	r3, #12
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e01a      	b.n	800154c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151e:	2304      	movs	r3, #4
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e013      	b.n	800154c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	611a      	str	r2, [r3, #16]
          break;
 8001536:	e009      	b.n	800154c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	615a      	str	r2, [r3, #20]
          break;
 8001542:	e003      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x130>
          break;
 800154a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d801      	bhi.n	8001556 <HAL_GPIO_Init+0x13a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e001      	b.n	800155a <HAL_GPIO_Init+0x13e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	@ 0xff
 8001560:	d802      	bhi.n	8001568 <HAL_GPIO_Init+0x14c>
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x152>
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	3b08      	subs	r3, #8
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	210f      	movs	r1, #15
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	431a      	orrs	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80b1 	beq.w	80016fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159c:	4b4d      	ldr	r3, [pc, #308]	@ (80016d4 <HAL_GPIO_Init+0x2b8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a4c      	ldr	r2, [pc, #304]	@ (80016d4 <HAL_GPIO_Init+0x2b8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <HAL_GPIO_Init+0x2b8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b4:	4a48      	ldr	r2, [pc, #288]	@ (80016d8 <HAL_GPIO_Init+0x2bc>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a40      	ldr	r2, [pc, #256]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d013      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a3f      	ldr	r2, [pc, #252]	@ (80016e0 <HAL_GPIO_Init+0x2c4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00d      	beq.n	8001604 <HAL_GPIO_Init+0x1e8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a3e      	ldr	r2, [pc, #248]	@ (80016e4 <HAL_GPIO_Init+0x2c8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x1e4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <HAL_GPIO_Init+0x2cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_GPIO_Init+0x1e0>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001600:	2302      	movs	r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001608:	2300      	movs	r3, #0
 800160a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800161a:	492f      	ldr	r1, [pc, #188]	@ (80016d8 <HAL_GPIO_Init+0x2bc>)
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001634:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	492c      	ldr	r1, [pc, #176]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	4928      	ldr	r1, [pc, #160]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4922      	ldr	r1, [pc, #136]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	491e      	ldr	r1, [pc, #120]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4918      	ldr	r1, [pc, #96]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4914      	ldr	r1, [pc, #80]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d021      	beq.n	80016f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	490e      	ldr	r1, [pc, #56]	@ (80016ec <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e021      	b.n	80016fe <HAL_GPIO_Init+0x2e2>
 80016ba:	bf00      	nop
 80016bc:	10320000 	.word	0x10320000
 80016c0:	10310000 	.word	0x10310000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	10210000 	.word	0x10210000
 80016cc:	10120000 	.word	0x10120000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40011400 	.word	0x40011400
 80016ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4909      	ldr	r1, [pc, #36]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	3301      	adds	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f ae8e 	bne.w	8001430 <HAL_GPIO_Init+0x14>
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	372c      	adds	r7, #44	@ 0x2c
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800176e:	e003      	b.n	8001778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	041a      	lsls	r2, r3, #16
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e272      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8087 	beq.w	80018b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	4b92      	ldr	r3, [pc, #584]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	4b8f      	ldr	r3, [pc, #572]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d112      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
 80017bc:	4b8c      	ldr	r3, [pc, #560]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b89      	ldr	r3, [pc, #548]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d168      	bne.n	80018b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e24c      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x76>
 80017ec:	4b80      	ldr	r3, [pc, #512]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a7f      	ldr	r2, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e02e      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x98>
 8001802:	4b7b      	ldr	r3, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7a      	ldr	r2, [pc, #488]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a77      	ldr	r2, [pc, #476]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0xbc>
 8001826:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a71      	ldr	r2, [pc, #452]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 8001840:	4b6b      	ldr	r3, [pc, #428]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6a      	ldr	r2, [pc, #424]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b68      	ldr	r3, [pc, #416]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a67      	ldr	r2, [pc, #412]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff faa8 	bl	8000db4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff faa4 	bl	8000db4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e200      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b5d      	ldr	r3, [pc, #372]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xe4>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fa94 	bl	8000db4 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fa90 	bl	8000db4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1ec      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b53      	ldr	r3, [pc, #332]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x10c>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ca:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d11c      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1c0      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4939      	ldr	r1, [pc, #228]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	e03a      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fa49 	bl	8000db4 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fa45 	bl	8000db4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1a1      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4927      	ldr	r1, [pc, #156]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <HAL_RCC_OscConfig+0x270>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fa28 	bl	8000db4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff fa24 	bl	8000db4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e180      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03a      	beq.n	8001a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa08 	bl	8000db4 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa04 	bl	8000db4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e160      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 face 	bl	8001f68 <RCC_Delay>
 80019cc:	e01c      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9ee 	bl	8000db4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f9ea 	bl	8000db4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e146      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	42420000 	.word	0x42420000
 80019f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b92      	ldr	r3, [pc, #584]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e9      	bne.n	80019dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a6 	beq.w	8001b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a87      	ldr	r2, [pc, #540]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b82      	ldr	r3, [pc, #520]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7e      	ldr	r2, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9ab 	bl	8000db4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f9a7 	bl	8000db4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	@ 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e103      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b75      	ldr	r3, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x312>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x334>
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a69      	ldr	r2, [pc, #420]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b67      	ldr	r3, [pc, #412]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a66      	ldr	r2, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e01c      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x356>
 8001ac0:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a60      	ldr	r2, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ada:	4b5b      	ldr	r3, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b58      	ldr	r3, [pc, #352]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f95b 	bl	8000db4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f957 	bl	8000db4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0b1      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b4b      	ldr	r3, [pc, #300]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ee      	beq.n	8001b02 <HAL_RCC_OscConfig+0x37e>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f945 	bl	8000db4 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f941 	bl	8000db4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e09b      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d061      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d146      	bne.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f915 	bl	8000db4 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f911 	bl	8000db4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e06d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4921      	ldr	r1, [pc, #132]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a19      	ldr	r1, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff f8e5 	bl	8000db4 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f8e1 	bl	8000db4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e03d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x46a>
 8001c0c:	e035      	b.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f8ce 	bl	8000db4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8ca 	bl	8000db4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e026      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
 8001c3a:	e01e      	b.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e019      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_OscConfig+0x500>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4965      	ldr	r1, [pc, #404]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff f81c 	bl	8000db4 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7ff f818 	bl	8000db4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RCC_ClockConfig+0x1cc>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff7a 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	080025a8 	.word	0x080025a8
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x30>
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x36>
 8001e8a:	e027      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	e027      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0c5b      	lsrs	r3, r3, #17
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e004      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	613b      	str	r3, [r7, #16]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	693b      	ldr	r3, [r7, #16]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	007a1200 	.word	0x007a1200
 8001ef8:	080025c0 	.word	0x080025c0
 8001efc:	080025d0 	.word	0x080025d0
 8001f00:	003d0900 	.word	0x003d0900

08001f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b02      	ldr	r3, [pc, #8]	@ (8001f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000000 	.word	0x20000000

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f1c:	f7ff fff2 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4903      	ldr	r1, [pc, #12]	@ (8001f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	080025b8 	.word	0x080025b8

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0adb      	lsrs	r3, r3, #11
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	@ (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	080025b8 	.word	0x080025b8

08001f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <RCC_Delay+0x34>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <RCC_Delay+0x38>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f84:	bf00      	nop
  }
  while (Delay --);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <RCC_Delay+0x1c>
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e042      	b.n	800203c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fdf6 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	@ 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fa09 	bl	8002400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800200c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800201c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b20      	cmp	r3, #32
 8002062:	d175      	bne.n	8002150 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_UART_Transmit+0x2c>
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e06e      	b.n	8002152 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2221      	movs	r2, #33	@ 0x21
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002082:	f7fe fe97 	bl	8000db4 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800209c:	d108      	bne.n	80020b0 <HAL_UART_Transmit+0x6c>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e003      	b.n	80020b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020b8:	e02e      	b.n	8002118 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	@ 0x80
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8df 	bl	8002288 <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e03a      	b.n	8002152 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3302      	adds	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e007      	b.n	800210a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1cb      	bne.n	80020ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	2140      	movs	r1, #64	@ 0x40
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8ab 	bl	8002288 <UART_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e006      	b.n	8002152 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b08a      	sub	sp, #40	@ 0x28
 800215e:	af02      	add	r7, sp, #8
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	f040 8081 	bne.w	800227e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_UART_Receive+0x2e>
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e079      	b.n	8002280 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2222      	movs	r2, #34	@ 0x22
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021a0:	f7fe fe08 	bl	8000db4 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ba:	d108      	bne.n	80021ce <HAL_UART_Receive+0x74>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e003      	b.n	80021d6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021d6:	e047      	b.n	8002268 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2200      	movs	r2, #0
 80021e0:	2120      	movs	r1, #32
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f850 	bl	8002288 <UART_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e042      	b.n	8002280 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10c      	bne.n	800221a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220c:	b29a      	uxth	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3302      	adds	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	e01f      	b.n	800225a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002222:	d007      	beq.n	8002234 <HAL_UART_Receive+0xda>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_UART_Receive+0xe8>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e008      	b.n	8002254 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800224e:	b2da      	uxtb	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1b2      	bne.n	80021d8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002298:	e03b      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d037      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe fd87 	bl	8000db4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e03a      	b.n	8002332 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d023      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d020      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b40      	cmp	r3, #64	@ 0x40
 80022d4:	d01d      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d116      	bne.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f81d 	bl	800233a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2208      	movs	r2, #8
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4013      	ands	r3, r2
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	429a      	cmp	r2, r3
 800232e:	d0b4      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800233a:	b480      	push	{r7}
 800233c:	b095      	sub	sp, #84	@ 0x54
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002362:	643a      	str	r2, [r7, #64]	@ 0x40
 8002364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002368:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e5      	bne.n	8002342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	61fb      	str	r3, [r7, #28]
   return(result);
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3314      	adds	r3, #20
 8002394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800239c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d119      	bne.n	80023e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f023 0310 	bic.w	r3, r3, #16
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023d2:	61ba      	str	r2, [r7, #24]
 80023d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	613b      	str	r3, [r7, #16]
   return(result);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e5      	bne.n	80023b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023f4:	bf00      	nop
 80023f6:	3754      	adds	r7, #84	@ 0x54
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800243a:	f023 030c 	bic.w	r3, r3, #12
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	430b      	orrs	r3, r1
 8002446:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <UART_SetConfig+0x114>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d103      	bne.n	8002470 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002468:	f7ff fd6a 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	e002      	b.n	8002476 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002470:	f7ff fd52 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 8002474:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <UART_SetConfig+0x118>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	0119      	lsls	r1, r3, #4
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	009a      	lsls	r2, r3, #2
 80024a0:	441a      	add	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <UART_SetConfig+0x118>)
 80024ae:	fba3 0302 	umull	r0, r3, r3, r2
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2064      	movs	r0, #100	@ 0x64
 80024b6:	fb00 f303 	mul.w	r3, r0, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	3332      	adds	r3, #50	@ 0x32
 80024c0:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <UART_SetConfig+0x118>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024cc:	4419      	add	r1, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009a      	lsls	r2, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <UART_SetConfig+0x118>)
 80024e6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	3332      	adds	r3, #50	@ 0x32
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <UART_SetConfig+0x118>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	440a      	add	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40013800 	.word	0x40013800
 8002518:	51eb851f 	.word	0x51eb851f

0800251c <memset>:
 800251c:	4603      	mov	r3, r0
 800251e:	4402      	add	r2, r0
 8002520:	4293      	cmp	r3, r2
 8002522:	d100      	bne.n	8002526 <memset+0xa>
 8002524:	4770      	bx	lr
 8002526:	f803 1b01 	strb.w	r1, [r3], #1
 800252a:	e7f9      	b.n	8002520 <memset+0x4>

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2600      	movs	r6, #0
 8002530:	4d0c      	ldr	r5, [pc, #48]	@ (8002564 <__libc_init_array+0x38>)
 8002532:	4c0d      	ldr	r4, [pc, #52]	@ (8002568 <__libc_init_array+0x3c>)
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	f000 f81a 	bl	8002574 <_init>
 8002540:	2600      	movs	r6, #0
 8002542:	4d0a      	ldr	r5, [pc, #40]	@ (800256c <__libc_init_array+0x40>)
 8002544:	4c0a      	ldr	r4, [pc, #40]	@ (8002570 <__libc_init_array+0x44>)
 8002546:	1b64      	subs	r4, r4, r5
 8002548:	10a4      	asrs	r4, r4, #2
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	080025d4 	.word	0x080025d4
 8002568:	080025d4 	.word	0x080025d4
 800256c:	080025d4 	.word	0x080025d4
 8002570:	080025d8 	.word	0x080025d8

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
